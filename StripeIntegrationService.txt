
            //Create Salesforce Account when Stripe Customer Created Block of Code
            if(eventType == 'customer.created'){
                String customerId = String.valueOf(objectMap.get('id'));
                system.debug('CustomerId='+customerId);
                String customerName = String.valueOf(objectMap.get('name'));
                system.debug('CustomerName='+customerName);
                List<Account> accList = new List<Account>();
                accList = [SELECT Id,Name,Email__c,phone,description,Stripe_Customer_ID__c FROM Account WHERE Stripe_Customer_ID__c =:customerId];
                if(accList.isEmpty() || accList == Null)
                    accList = [SELECT Id,Name,Email__c,phone,description,Stripe_Customer_ID__c FROM Account WHERE Name =:customerName];
                system.debug('acclist='+accList);
                String custEmail = String.valueOf(objectMap.get('email'));
                system.debug('custEmail='+custEmail);
                String custPhone = String.valueOf(objectMap.get('phone'));
                system.debug('custPhone='+custPhone);
                String custDesc = String.valueOf(objectMap.get('description'));
                system.debug('custDesc='+custDesc);
                
                //When Stripe Customer is Created and if no acc exist with stripeid/stripe name in salesforce then create an acc in salesforce.
                if(accList == Null || accList.isEmpty()){
                    Account acc = new Account();
                    acc.name = customerName;
                    acc.Email__c = custEmail;
                    acc.Phone = custPhone;
                    acc.Description = custDesc;
                    acc.Stripe_Customer_ID__c = customerId;    
                    insert acc;
                }
                else//Update Salesforce Account with stripe Id when Stripe Customer is Created and AccRecord already Exist without stripeid.
                {
                    if(accList[0].name != customerName || accList[0].Email__c != custEmail || accList[0].phone != custPhone ||
                       accList[0].description != custDesc || accList[0].Stripe_Customer_ID__c != customerId){
                           Account updateAcc = new Account();
                           updateAcc.Id = accList[0].Id;
                           updateAcc.name = customerName;
                           updateAcc.Email__c = custEmail;
                           updateAcc.phone = custPhone;
                           updateAcc.description = custDesc;
                           updateAcc.Stripe_Customer_ID__c = customerId;
                           if(accList[0].SalesforcePreviousValues__c != Null){
                               updateAcc.SalesforcePreviousValues__c =  accList[0].SalesforcePreviousValues__c +'\n'+'\n'; 
                           }
                           if(accList[0].Stripe_Customer_ID__c != Null)
                               updateAcc.SalesforcePreviousValues__c+=' Stripe CustomerID = '+accList[0].Stripe_Customer_ID__c+'\n';
                           updateAcc.SalesforcePreviousValues__c +=' Name = '+accList[0].name+'\n';
                           if(accList[0].Email__c != Null)
                               updateAcc.SalesforcePreviousValues__c+=' Email = '+accList[0].Email__c+'\n';
                           if(accList[0].phone != Null)
                               updateAcc.SalesforcePreviousValues__c+=' Phone = '+accList[0].phone+'\n';
                           if(accList[0].description != Null)
                               updateAcc.SalesforcePreviousValues__c+=' Description = '+accList[0].description+'\n';
                           Update updateAcc;
                       }
                }
            }
            //Create/Update Salesforce Account when Stripe Customer Updated Block of Code
            if(eventType == 'customer.updated'){
                String customerId = String.valueOf(objectMap.get('id'));
                system.debug('CustomerId='+customerId);
                String customerName = String.valueOf(objectMap.get('name'));
                system.debug('CustomerName='+customerName);
                List<Account> accList = new List<Account>();
                accList = [SELECT Id,Name,Email__c,phone,description,Stripe_Customer_ID__c FROM Account WHERE Stripe_Customer_ID__c =:customerId];
                if(accList.isEmpty() || accList == Null)
                    accList = [SELECT Id,Name,Email__c,phone,description,Stripe_Customer_ID__c FROM Account WHERE Name =:customerName];
                system.debug('acclist='+accList);
                String custEmail = String.valueOf(objectMap.get('email'));
                system.debug('custEmail='+custEmail);
                String custPhone = String.valueOf(objectMap.get('phone'));
                system.debug('custPhone='+custPhone);
                String custDesc = String.valueOf(objectMap.get('description'));
                system.debug('custDesc='+custDesc);
                
                //When Stripe Customer is Created and if no acc exist with stripeid/Stripe Name in salesforce then create an acc in salesforce.
                if(accList == Null || accList.isEmpty()){
                    Account acc = new Account();
                    acc.name = customerName;
                    acc.Email__c = custEmail;
                    acc.Phone = custPhone;
                    acc.Description = custDesc;
                    acc.Stripe_Customer_ID__c = customerId;    
                    insert acc;
                }
                else//Update Salesforce Account when Stripe Customer is Updated.
                {
                    if(accList[0].name != customerName || accList[0].Email__c != custEmail || accList[0].phone != custPhone ||
                       accList[0].description != custDesc || accList[0].Stripe_Customer_ID__c != customerId){
                           Account updateAcc = new Account();
                           updateAcc.Id = accList[0].Id;
                           updateAcc.name = customerName;
                           updateAcc.Email__c = custEmail;
                           updateAcc.phone = custPhone;
                           updateAcc.description = custDesc;
                           updateAcc.Stripe_Customer_ID__c = customerId;
                           if(accList[0].SalesforcePreviousValues__c != Null){
                               updateAcc.SalesforcePreviousValues__c =  accList[0].SalesforcePreviousValues__c +'\n'+'\n'; 
                           }
                           if(accList[0].Stripe_Customer_ID__c != Null)
                               updateAcc.SalesforcePreviousValues__c+=' Stripe CustomerID = '+accList[0].Stripe_Customer_ID__c+'\n';
                           updateAcc.SalesforcePreviousValues__c +=' Name = '+accList[0].name+'\n';
                           if(accList[0].Email__c != Null)
                               updateAcc.SalesforcePreviousValues__c+=' Email = '+accList[0].Email__c+'\n';
                           if(accList[0].phone != Null)
                               updateAcc.SalesforcePreviousValues__c+=' Phone = '+accList[0].phone+'\n';
                           if(accList[0].description != Null)
                               updateAcc.SalesforcePreviousValues__c+=' Description = '+accList[0].description+'\n';
                           Update updateAcc;
                       }
                }
            }
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			******************************QuickbooksIntegrationServiceQueueable**************************************************************************************************************************************************
			********************************************************************************************************************************************************************************
			********************************************************************************************************************************************************************************
			
			
            //***Create/Update Account when Customer is Created/Updated in Quickbooks***.	
            if(entityName == 'Customer' && (operation == 'Update' || operation == 'Create')){
                qb_Metadata__mdt qb_Cred = QuickbooksUtil.quickbooksCred();   
                
                String accessToken = qb_Cred.access_token__c;
                string realmId = qb_Cred.realmId__c;
                string baseUrl = qb_cred.Environment__c == 'Production'?qb_cred.Prod_Base_URL__c:qb_Cred.Sanbdox_Base_URL__c;
                string minorVer = qb_Cred.minorversion__c;
                
                HttpRequest req = new HttpRequest();
                req.setEndpoint(Test.isRunningTest() ? 'https://sandbox-quickbooks.api.intuit.com/v3/company/4620816365244111840/Customer/query?minorversion=65': baseUrl+'/v3/company/'+realmId+'/query?minorversion='+minorVer);
                req.setMethod('POST');
                req.setBody('select * from Customer where id=\''+entityId+'\'');
                //req.setBody('select DisplayName,PrimaryEmailAddr,PrimaryPhone,BillAddr from Customer where id=\''+entityId+'\'');
                req.setHeader('Authorization', 'Bearer '  + accessToken);
                req.setheader('Accept', 'application/json');
                req.setHeader('Content-Type', 'application/text');
                Http http = new Http();
                string errorMessage = '';
                //List<customer> customerList = new  List<customer>();
                Account acc = new Account();
                
                try{
                    acc = [Select id,Name,First_Name__c,Last_Name__c,Email__c, Mobile__c,Phone,BillingPostalCode,BillingStreet,BillingCity,BillingState,BillingCountry,QBO_customer_Id__c,Account_Synced_to_QuickBooks__c from Account where QBO_customer_Id__c = :entityId Limit 1];
                    system.debug('Account='+acc);
                }catch (Exception e) {
                    acc = null;
                }
                
                //Get the Customer Information from QB using CustomerId Received from QBService Class.
                if((operation == 'Create' && acc == null) || operation == 'Update')
                { 
                    system.debug('req.body:1st: :'+req.getbody());
                    HttpResponse res2 = http.send(req);
                    if (res2.getStatusCode() == 200) {
                        system.debug('res2.getBody:: :'+res2.getBody());
                        Map<String, Object> deserializeJson2 = (Map<String, Object>) JSON.deserializeUntyped(res2.getBody());
                        System.debug('deserializeJson2' +deserializeJson2);
                        Map<String, Object> QueryResponseMap2 = (Map<String, Object>) deserializeJson2.get('QueryResponse');
                        System.debug('QueryResponseMap2' +QueryResponseMap2);
                        List<Object> customerMap = (List<Object>) QueryResponseMap2.get('Customer');    
                        System.debug('customerMap' +customerMap);
                        Map<String, Object> customerIndex = (Map<String, Object>) customerMap[0];
                        System.debug('customerIndex' +customerIndex);
                        
                        String companyName = (customerIndex.containsKey('CompanyName')) ? (String)customerIndex.get('CompanyName') : null;
                        System.debug('companyName=' +companyName);
                        String DisplayName = (customerIndex.containsKey('DisplayName')) ? (String)customerIndex.get('DisplayName') : null;
                        System.debug('DisplayName=' +DisplayName);
                        
                        Map<String, Object> billAddrMap = (customerIndex.containsKey('BillAddr')) ? (Map<String, Object>) customerIndex.get('BillAddr') : null;
                        System.debug('billAddrMap=' +billAddrMap);
                        String postalCode = (billAddrMap != null && billAddrMap.containsKey('PostalCode')) ? (String) billAddrMap.get('PostalCode') : null;
                        System.debug('postalCode=' +postalCode);
                        String line1 = (billAddrMap != null && billAddrMap.containsKey('Line1')) ? (String) billAddrMap.get('Line1') : null;
                        System.debug('Line1=' +line1);
                        String line2 = (billAddrMap != null && billAddrMap.containsKey('Line2')) ? (String) billAddrMap.get('Line2') : null;
                        System.debug('Line2=' +line2);
                        String city = (billAddrMap != null && billAddrMap.containsKey('City')) ? (String) billAddrMap.get('City') : null;
                        System.debug('City=' +city);
                        String countrySubDivisionCode = (billAddrMap != null && billAddrMap.containsKey('CountrySubDivisionCode')) ? (String) billAddrMap.get('CountrySubDivisionCode') : null;
                        System.debug('CountrySubDivisionCode=' +countrySubDivisionCode);
                        String country = (billAddrMap != null && billAddrMap.containsKey('Country')) ? (String) billAddrMap.get('Country') : null;
                        System.debug('Country=' +country);
                        
                        Map<String, Object> primaryPhoneMap = (customerIndex.containsKey('PrimaryPhone')) ? (Map<String, Object>) customerIndex.get('PrimaryPhone') : null;
                        System.debug('primaryPhoneMap=' +primaryPhoneMap);
                        String primaryPhone = (primaryPhoneMap != null && primaryPhoneMap.containsKey('FreeFormNumber')) ? (String) primaryPhoneMap.get('FreeFormNumber') : null;
                        System.debug('primaryPhone=' +primaryPhone);
                        
                        Map<String, Object> primaryEmailMap = (customerIndex.containsKey('PrimaryEmailAddr')) ? (Map<String, Object>) customerIndex.get('PrimaryEmailAddr') : null;
                        System.debug('primaryEmailMap=' +primaryEmailMap);
                        String primaryEmail = (primaryEmailMap != null && primaryEmailMap.containsKey('Address')) ? (String) primaryEmailMap.get('Address') : null;
                        System.debug('primaryEmail=' +primaryEmail);
                        
                        Map<String,Object> mobileMap =(customerIndex.containsKey('Mobile')) ? (Map<String,Object>) customerIndex.get('Mobile') : null;
                        System.debug('mobileMap=' +mobileMap);
                        String mobilePhone = (mobileMap != null && mobileMap.containsKey('FreeFormNumber')) ? (String) mobileMap.get('FreeFormNumber') : '';
                        System.debug('mobilePhone=' +mobilePhone);
                        

                        String givenName = (customerIndex.containsKey('GivenName') &&  customerIndex.get('GivenName') != null) ? (String) customerIndex.get('GivenName') : '';
                        System.debug('givenName=' +givenName);
                        String familyName = (customerIndex.containsKey('FamilyName') && customerIndex.get('FamilyName') != null) ? (String) customerIndex.get('FamilyName') : '';
                        System.debug('familyName=' +familyName);
                        String individualName = (givenName + ' ' + familyName).trim();
                        System.debug('individualName=' +individualName);
                        Account acc2 ;
                        String line = '';
                        if(line1 != Null)
                            line = line1;
                        if(line2 != Null)
                            line+=' ' +line2;
                        system.debug('Line='+line);
                        
                        //Check if any account exist in Salesforce with QB Display/Company/Individual Name when Customer Created/Updated in QB 
                        if((operation == 'Create' || operation == 'Update') && acc == null){
                            if(operation == 'Create' || operation == 'Update'){
                                if(DisplayName != null && DisplayName != ''){
                                    try{
                                        acc2= [Select Id,Name,First_Name__c,Last_Name__c,Email__c, Mobile__c,Phone,BillingPostalCode,BillingStreet,BillingCity,BillingState,BillingCountry,QBO_customer_Id__c,Account_Synced_to_QuickBooks__c From Account Where name=:DisplayName Limit 1];
                                        System.debug('acc2' +acc2);
                                    }catch(exception e){
                                        acc2 = null;
                                    }
                                }
                                if(companyName != null && acc2 == null){
                                    try{
                                        acc2= [Select Id,Name,First_Name__c,Last_Name__c,Email__c, Mobile__c,Phone,BillingPostalCode,BillingStreet,BillingCity,BillingState,BillingCountry,QBO_customer_Id__c,Account_Synced_to_QuickBooks__c From Account Where Name =:companyName Limit 1];
                                        System.debug('acc2' +acc2);
                                    }catch(exception e){
                                        acc2 = null;
                                    }
                                }else{
                                    if(individualName != '' && acc2 == null){                                            
                                        try{
                                            acc2= [Select Id,Name,First_Name__c,Last_Name__c,Email__c, Mobile__c,Phone,BillingPostalCode,BillingStreet,BillingCity,BillingState,BillingCountry,QBO_customer_Id__c,Account_Synced_to_QuickBooks__c From Account Where Name =:individualName Limit 1];
                                            System.debug('acc2' +acc2);
                                        }catch(exception e){
                                            acc2 = null; 
                                        }
                                    }
                                }  
                            }
                            
                            //if Account Exist Update the Account with QB Customer Id and if any field values updated.
                            if((operation == 'Create' || operation == 'Update') && acc2 != null){
                                acc = acc2;
                                Account accUpdate = new Account();
                                accUpdate.Id = acc.Id;
                                if(acc2.SalesforcePreviousValues__c != Null)
                                    accUpdate.SalesforcePreviousValues__c = acc2.SalesforcePreviousValues__c +'\n'+'\n'; 
                                if(acc.QBO_customer_Id__c != entityId){
                                    accUpdate.QBO_customer_Id__c = entityId;
                                    accUpdate.SalesforcePreviousValues__c +=' QBO customerId = '+acc.QBO_customer_Id__c+'\n';
                                }
                                accUpdate.SalesforcePreviousValues__c +=' Name = '+acc.name+'\n';
                                if(acc.name != companyName) 
                                    accUpdate.name = companyName;
                                if(companyName == Null && acc.name != DisplayName) 
                                    accUpdate.name = DisplayName;
                                if(acc.First_Name__c != givenName)
                                    accUpdate.First_Name__c = givenName;
                                if(acc.Last_Name__c != familyName)
                                    accUpdate.Last_Name__c = familyName;
                                if(acc.email__c != primaryEmail)
                                    accUpdate.email__c = primaryEmail;
                                if(acc.Mobile__c != primaryPhone)
                                    accUpdate.Mobile__c = primaryPhone;
                                if(acc.Phone != mobilePhone)
                                    accUpdate.Phone = mobilePhone;
                                if(acc.BillingPostalCode != postalCode)
                                    accUpdate.BillingPostalCode = postalCode;
                                if(acc.BillingStreet != line)
                                    accUpdate.BillingStreet = line;
                                if(acc.BillingCity != city)
                                    accUpdate.BillingCity = city;  
                                if(acc.BillingState != CountrySubDivisionCode)
                                    accUpdate.BillingState = CountrySubDivisionCode;
                                if(acc.BillingCountry != country)
                                    accUpdate.BillingCountry = country;
                                if(acc.Account_Synced_to_QuickBooks__c == false)
                                    accUpdate.Account_Synced_to_QuickBooks__c = true;
                                update accUpdate;                                                             
                                System.debug('accUpdate' +accUpdate);
                            } 
                            else if((operation == 'Create' || operation == 'Update') && acc2 == null)
                            {//If Account Not Exist then Create the Account with QB Customer Information Received.
                                Account acc3 = new Account();                            
                                if(companyName != null) //first company name if null then display name
                                    acc3.name = companyName;
                                if(companyName == Null && DisplayName != Null)
                                    acc3.name = DisplayName;
                                if(givenName != null)
                                    acc3.First_Name__c = givenName ;
                                if(familyName != null)
                                    acc3.Last_Name__c = familyName ;
                                acc3.email__c = primaryEmail;
                                acc3.Mobile__c = primaryPhone;
                                acc3.Phone = mobilePhone;
                                acc3.BillingStreet = line;
                                acc3.BillingState = CountrySubDivisionCode; 
                                acc3.BillingCity = city;  
                                acc3.BillingCountry = country;
                                acc3.BillingPostalCode = postalCode;
                                //acc3.AccountSource = 'Automatic - Quickbooks Recurring Opportunity Creation';
                                acc3.Account_Synced_to_QuickBooks__c = true;
                                acc3.QBO_customer_Id__c = entityId;
                                insert acc3;
                                System.debug('acc3' +acc3);
                            }
                        }
                        else if(operation == 'Update' && acc != null)//if Customer Updated in QB and Same Account Exist in Salesforce then Update the Account with QB Information.
                        {
                            System.debug('acc' +acc);
                            Account accUpdate = new Account();
                            accUpdate.Id = acc.Id;
                            if(acc.name != companyName)  
                                accUpdate.name = companyName;
                            if(companyName == Null && acc.name != DisplayName) 
                                accUpdate.name = DisplayName;
                            if(acc.First_Name__c != givenName)
                                accUpdate.First_Name__c = givenName;
                            if(acc.Last_Name__c != familyName)
                                accUpdate.Last_Name__c = familyName;
                            if(acc.email__c != primaryEmail)
                                accUpdate.email__c = primaryEmail;
                            if(acc.Mobile__c != primaryPhone)
                                accUpdate.Mobile__c = primaryPhone;
                            if(acc.Phone != mobilePhone)
                                accUpdate.Phone = mobilePhone;
                            if(acc.BillingPostalCode != postalCode)
                                accUpdate.BillingPostalCode = postalCode;
                            if(acc.BillingStreet != line)
                                accUpdate.BillingStreet = line;
                            if(acc.BillingCity != city)
                                accUpdate.BillingCity = city;  
                            if(acc.BillingState != CountrySubDivisionCode)
                                accUpdate.BillingState = CountrySubDivisionCode;
                            if(acc.BillingCountry != country)
                                accUpdate.BillingCountry = country;
                            if(acc.Account_Synced_to_QuickBooks__c == false)
                                accUpdate.Account_Synced_to_QuickBooks__c = true;
                            if(acc.QBO_customer_Id__c != entityId)
                                accUpdate.QBO_customer_Id__c = entityId;
                            update accUpdate;                                                                      
                            
                        }
                    } 
                }
            }
            
			
			
			///Take Previousvalue only for updated fields backup
			
			************************************************************
			//Create/Update Salesforce Account when Stripe Customer Created/Updated Block of Code
            if(eventType == 'customer.created' || eventType == 'customer.updated'){
                String customerId = String.valueOf(objectMap.get('id'));
                system.debug('CustomerId='+customerId);
                String customerName = String.valueOf(objectMap.get('name'));
                system.debug('CustomerName='+customerName);
                List<Account> accList = new List<Account>();
                accList = [SELECT Id,Name,Email__c,phone,description,Stripe_Customer_ID__c,SalesforcePreviousValues__c FROM Account WHERE Stripe_Customer_ID__c =:customerId];
                if(accList.isEmpty() || accList == Null)
                    accList = [SELECT Id,Name,Email__c,phone,description,Stripe_Customer_ID__c,SalesforcePreviousValues__c FROM Account WHERE Name =:customerName];
                system.debug('acclist='+accList);
                String custEmail = String.valueOf(objectMap.get('email'));
                system.debug('custEmail='+custEmail);
                String custPhone = String.valueOf(objectMap.get('phone'));
                system.debug('custPhone='+custPhone);
                String custDesc = String.valueOf(objectMap.get('description'));
                system.debug('custDesc='+custDesc);
                
                //Create Salesforce Account If Not Exist with StripeId/Name When Stripe Customer is Created/Updated .
                if(accList == Null || accList.isEmpty()){
                    Account acc = new Account();
                    acc.name = customerName;
                    acc.Email__c = custEmail;
                    acc.Phone = custPhone;
                    acc.Description = custDesc;
                    acc.Stripe_Customer_ID__c = customerId;    
                    insert acc;
                }
                else//Update Salesforce Account if Already Exist when Stripe Customer is Created/Updated .
                {
                    if(accList[0].name != customerName || accList[0].Email__c != custEmail || accList[0].phone != custPhone ||
                       accList[0].description != custDesc || accList[0].Stripe_Customer_ID__c != customerId){
                           Account updateAcc = new Account();
                           updateAcc.Id = accList[0].Id;
                           updateAcc.name = customerName;
                           updateAcc.Email__c = custEmail;
                           updateAcc.phone = custPhone;
                           updateAcc.description = custDesc;
                           updateAcc.Stripe_Customer_ID__c = customerId;
                           if(accList[0].SalesforcePreviousValues__c != Null){
                               updateAcc.SalesforcePreviousValues__c =  accList[0].SalesforcePreviousValues__c +'\n'+'\n'; 
                           }
                           if(accList[0].Stripe_Customer_ID__c != Null)
                               updateAcc.SalesforcePreviousValues__c+=' Stripe CustomerID = '+accList[0].Stripe_Customer_ID__c+'\n';
                           updateAcc.SalesforcePreviousValues__c +=' Name = '+accList[0].name+'\n';
                           if(accList[0].Email__c != Null)
                               updateAcc.SalesforcePreviousValues__c+=' Email = '+accList[0].Email__c+'\n';
                           if(accList[0].phone != Null)
                               updateAcc.SalesforcePreviousValues__c+=' Phone = '+accList[0].phone+'\n';
                           if(accList[0].description != Null)
                               updateAcc.SalesforcePreviousValues__c+=' Description = '+accList[0].description+'\n';
                           Update updateAcc;
                       }
                }
            }
			
			
			
			
			************************************************************
			if(acc != null){
                            Account accUpdate = new Account();
                            accUpdate.Id = acc.Id;
                            if(acc.SalesforcePreviousValues__c != Null)
                                accUpdate.SalesforcePreviousValues__c = acc.SalesforcePreviousValues__c +'\n'+'\n'; 
                            if(acc.QBO_customer_Id__c != entityId){
                                accUpdate.QBO_customer_Id__c = entityId;
                            }
                            accUpdate.SalesforcePreviousValues__c +=' QBO customerId = '+acc.QBO_customer_Id__c+'\n';
                            accUpdate.SalesforcePreviousValues__c +=' Name = '+acc.name+'\n';
                            if(acc.name != companyName) 
                                accUpdate.name = companyName;
                            if(companyName == Null && acc.name != DisplayName) 
                                accUpdate.name = DisplayName;
                            if(acc.First_Name__c != givenName)
                                accUpdate.First_Name__c = givenName;
                            if(acc.Last_Name__c != familyName)
                                accUpdate.Last_Name__c = familyName;
                            if(acc.email__c != primaryEmail){
                                accUpdate.email__c = primaryEmail;
                                accUpdate.SalesforcePreviousValues__c +=' Email = '+acc.email__c+'\n';
                            }
                            if(acc.Mobile__c != primaryPhone){
                                accUpdate.Mobile__c = primaryPhone;
                                accUpdate.SalesforcePreviousValues__c +=' Mobile = '+acc.Mobile__c+'\n';
                            }
                            if(acc.Phone != mobilePhone){
                                accUpdate.Phone = mobilePhone;
                                accUpdate.SalesforcePreviousValues__c +=' Phone = '+acc.Phone+'\n';
                            }
                            if(acc.BillingPostalCode != postalCode){
                                accUpdate.BillingPostalCode = postalCode;
                                accUpdate.SalesforcePreviousValues__c +=' BillingPostalCode = '+acc.BillingPostalCode+'\n';
                            }
                            if(acc.BillingStreet != line){
                                accUpdate.BillingStreet = line;
                                accUpdate.SalesforcePreviousValues__c +=' BillingStreet = '+acc.BillingStreet+'\n';
                            }
                            if(acc.BillingCity != city){
                                accUpdate.BillingCity = city;  
                                accUpdate.SalesforcePreviousValues__c +=' BillingCity = '+acc.BillingCity+'\n';
                            }
                            if(acc.BillingState != CountrySubDivisionCode){
                                accUpdate.BillingState = CountrySubDivisionCode;
                                accUpdate.SalesforcePreviousValues__c +=' BillingState = '+acc.BillingState+'\n';
                            }
                            if(acc.BillingCountry != country){
                                accUpdate.BillingCountry = country;
                                accUpdate.SalesforcePreviousValues__c +=' BillingCountry = '+acc.BillingCountry+'\n';
                            }
                            if(acc.Account_Synced_to_QuickBooks__c == false){
                                accUpdate.Account_Synced_to_QuickBooks__c = true;
                                accUpdate.SalesforcePreviousValues__c +=' Account_Synced_to_QuickBooks__c = '+acc.Account_Synced_to_QuickBooks__c+'\n';
                            }
                            update accUpdate;                                                             
                            System.debug('accUpdate' +accUpdate);
                        } 
           
		   
		   ************************************************************
		   
		   public class QuickbooksIntegrationServiceQueueable implements Queueable,Database.AllowsCallouts{
    String processRequest;
    
    public QuickbooksIntegrationServiceQueueable(String processRequest){
        this.processRequest = processRequest;
    } 
    
    public void execute(QueueableContext context) {
        String jsonString = processRequest;
        system.debug('jsonString = '+jsonString);
        Map<String, Object> parsedJson = (Map<String, Object>) JSON.deserializeUntyped(jsonString);
        system.debug('parsedJson='+parsedJson);
        List<Object> eventNotifications = (List<Object>) parsedJson.get('eventNotifications');
        Map<String, Object> eventNotification = (Map<String, Object>) eventNotifications[0];
        Map<String, Object> dataChangeEvent = (Map<String, Object>) eventNotification.get('dataChangeEvent');
        List<Object> entities = (List<Object>) dataChangeEvent.get('entities');
        Map<String, Object> entity = (Map<String, Object>) entities[0];
        String entityId = (string) entity.get('id');
        String operation = (string) entity.get('operation');
        String entityName = (String) entity.get('name');
        
        
        Api_Event__c apiEvent = new Api_Event__c();
        apiEvent.Event_ID__c =  operation;
        apiEvent.Event_Type__c =  entityName;
        apiEvent.Platform__c = 'QuickBooks';
        apiEvent.Response_Body__c = processRequest;
        apiEvent.Lead_Event_ID__c = (string) entity.get('id');
        try{
            System.debug('entityId'+entityId);
            System.debug('Operation'+Operation);
            
            //***Create/Update Account when Customer is Created/Updated in Quickbooks***.	
            if(entityName == 'Customer' && (operation == 'Update' || operation == 'Create')){
                qb_Metadata__mdt qb_Cred = QuickbooksUtil.quickbooksCred();   
                
                String accessToken = qb_Cred.access_token__c;
                string realmId = qb_Cred.realmId__c;
                string baseUrl = qb_cred.Environment__c == 'Production'?qb_cred.Prod_Base_URL__c:qb_Cred.Sanbdox_Base_URL__c;
                string minorVer = qb_Cred.minorversion__c;
                
                HttpRequest req = new HttpRequest();
                req.setEndpoint(Test.isRunningTest() ? 'https://sandbox-quickbooks.api.intuit.com/v3/company/4620816365244111840/Customer/query?minorversion=65': baseUrl+'/v3/company/'+realmId+'/query?minorversion='+minorVer);
                req.setMethod('POST');
                req.setBody('select * from Customer where id=\''+entityId+'\'');
                //req.setBody('select DisplayName,PrimaryEmailAddr,PrimaryPhone,BillAddr from Customer where id=\''+entityId+'\'');
                req.setHeader('Authorization', 'Bearer '  + accessToken);
                req.setheader('Accept', 'application/json');
                req.setHeader('Content-Type', 'application/text');
                Http http = new Http();
                string errorMessage = '';
                //List<customer> customerList = new  List<customer>();
                Account acc = new Account();
                
                try{
                    acc = [Select id,Name,First_Name__c,Last_Name__c,Email__c, Mobile__c,Phone,BillingPostalCode,BillingStreet,BillingCity,BillingState,BillingCountry,QBO_customer_Id__c,Account_Synced_to_QuickBooks__c,SalesforcePreviousValues__c from Account where QBO_customer_Id__c = :entityId Limit 1];
                    system.debug('Account='+acc);
                }catch (Exception e) {
                    acc = null;
                }
                
                //Get the Customer Information from QB using CustomerId Received from QBService Class.
                if((operation == 'Create' && acc == null) || operation == 'Update')
                { 
                    system.debug('req.body:1st: :'+req.getbody());
                    HttpResponse res2 = http.send(req);
                    if (res2.getStatusCode() == 200) {
                        system.debug('res2.getBody:: :'+res2.getBody());
                        Map<String, Object> deserializeJson2 = (Map<String, Object>) JSON.deserializeUntyped(res2.getBody());
                        System.debug('deserializeJson2' +deserializeJson2);
                        Map<String, Object> QueryResponseMap2 = (Map<String, Object>) deserializeJson2.get('QueryResponse');
                        System.debug('QueryResponseMap2' +QueryResponseMap2);
                        List<Object> customerMap = (List<Object>) QueryResponseMap2.get('Customer');    
                        System.debug('customerMap' +customerMap);
                        Map<String, Object> customerIndex = (Map<String, Object>) customerMap[0];
                        System.debug('customerIndex' +customerIndex);
                        
                        String companyName = (customerIndex.containsKey('CompanyName')) ? (String)customerIndex.get('CompanyName') : null;
                        System.debug('companyName=' +companyName);
                        String DisplayName = (customerIndex.containsKey('DisplayName')) ? (String)customerIndex.get('DisplayName') : null;
                        System.debug('DisplayName=' +DisplayName);
                        
                        Map<String, Object> billAddrMap = (customerIndex.containsKey('BillAddr')) ? (Map<String, Object>) customerIndex.get('BillAddr') : null;
                        System.debug('billAddrMap=' +billAddrMap);
                        String postalCode = (billAddrMap != null && billAddrMap.containsKey('PostalCode')) ? (String) billAddrMap.get('PostalCode') : null;
                        System.debug('postalCode=' +postalCode);
                        String line1 = (billAddrMap != null && billAddrMap.containsKey('Line1')) ? (String) billAddrMap.get('Line1') : null;
                        System.debug('Line1=' +line1);
                        String line2 = (billAddrMap != null && billAddrMap.containsKey('Line2')) ? (String) billAddrMap.get('Line2') : null;
                        System.debug('Line2=' +line2);
                        String city = (billAddrMap != null && billAddrMap.containsKey('City')) ? (String) billAddrMap.get('City') : null;
                        System.debug('City=' +city);
                        String countrySubDivisionCode = (billAddrMap != null && billAddrMap.containsKey('CountrySubDivisionCode')) ? (String) billAddrMap.get('CountrySubDivisionCode') : null;
                        System.debug('CountrySubDivisionCode=' +countrySubDivisionCode);
                        String country = (billAddrMap != null && billAddrMap.containsKey('Country')) ? (String) billAddrMap.get('Country') : null;
                        System.debug('Country=' +country);
                        
                        Map<String, Object> primaryPhoneMap = (customerIndex.containsKey('PrimaryPhone')) ? (Map<String, Object>) customerIndex.get('PrimaryPhone') : null;
                        System.debug('primaryPhoneMap=' +primaryPhoneMap);
                        String primaryPhone = (primaryPhoneMap != null && primaryPhoneMap.containsKey('FreeFormNumber')) ? (String) primaryPhoneMap.get('FreeFormNumber') : null;
                        System.debug('primaryPhone=' +primaryPhone);
                        
                        Map<String, Object> primaryEmailMap = (customerIndex.containsKey('PrimaryEmailAddr')) ? (Map<String, Object>) customerIndex.get('PrimaryEmailAddr') : null;
                        System.debug('primaryEmailMap=' +primaryEmailMap);
                        String primaryEmail = (primaryEmailMap != null && primaryEmailMap.containsKey('Address')) ? (String) primaryEmailMap.get('Address') : null;
                        System.debug('primaryEmail=' +primaryEmail);
                        
                        Map<String,Object> mobileMap =(customerIndex.containsKey('Mobile')) ? (Map<String,Object>) customerIndex.get('Mobile') : null;
                        System.debug('mobileMap=' +mobileMap);
                        String mobilePhone = (mobileMap != null && mobileMap.containsKey('FreeFormNumber')) ? (String) mobileMap.get('FreeFormNumber') : '';
                        System.debug('mobilePhone=' +mobilePhone);
                        

                        String givenName = (customerIndex.containsKey('GivenName') &&  customerIndex.get('GivenName') != null) ? (String) customerIndex.get('GivenName') : '';
                        System.debug('givenName=' +givenName);
                        String familyName = (customerIndex.containsKey('FamilyName') && customerIndex.get('FamilyName') != null) ? (String) customerIndex.get('FamilyName') : '';
                        System.debug('familyName=' +familyName);
                        String individualName = (givenName + ' ' + familyName).trim();
                        System.debug('individualName=' +individualName);
                        Account acc2 ;
                        String line = '';
                        if(line1 != Null)
                            line = line1;
                        if(line2 != Null)
                            line+=' ' +line2;
                        system.debug('Line='+line);
                        
                        //Check if any account exist in Salesforce with QB Display/Company/Individual Name when Customer Created/Updated in QB 
                        if(acc == null){
                            if(DisplayName != null && DisplayName != ''){
                                    try{
                                        acc2= [Select Id,Name,First_Name__c,Last_Name__c,Email__c, Mobile__c,Phone,BillingPostalCode,BillingStreet,BillingCity,BillingState,BillingCountry,QBO_customer_Id__c,Account_Synced_to_QuickBooks__c,SalesforcePreviousValues__c From Account Where name=:DisplayName Limit 1];
                                        System.debug('acc2' +acc2);
                                    }catch(exception e){
                                        acc2 = null;
                                    }
                                }
                                if(companyName != null && acc2 == null){
                                    try{
                                        acc2= [Select Id,Name,First_Name__c,Last_Name__c,Email__c, Mobile__c,Phone,BillingPostalCode,BillingStreet,BillingCity,BillingState,BillingCountry,QBO_customer_Id__c,Account_Synced_to_QuickBooks__c,SalesforcePreviousValues__c From Account Where Name =:companyName Limit 1];
                                        System.debug('acc2' +acc2);
                                    }catch(exception e){
                                        acc2 = null;
                                    }
                                }else{
                                    if(individualName != '' && acc2 == null){                                            
                                        try{
                                            acc2= [Select Id,Name,First_Name__c,Last_Name__c,Email__c, Mobile__c,Phone,BillingPostalCode,BillingStreet,BillingCity,BillingState,BillingCountry,QBO_customer_Id__c,Account_Synced_to_QuickBooks__c,SalesforcePreviousValues__c From Account Where Name =:individualName Limit 1];
                                            System.debug('acc2' +acc2);
                                        }catch(exception e){
                                            acc2 = null; 
                                        }
                                    }
                                }
                            acc = acc2;
                        }
                        
                        Set<Account> accList = new Set<Account>();
                        //if Account Exist Update the Account with QB Customer Id and if any field values updated.
                        if(acc != null){
                            Account accUpdate = new Account();
                            accUpdate.Id = acc.Id;
                            if(acc.SalesforcePreviousValues__c != Null)
                                accUpdate.SalesforcePreviousValues__c = acc.SalesforcePreviousValues__c +'\n'+'\n'; 
                            if(acc.QBO_customer_Id__c != entityId){
                                accUpdate.QBO_customer_Id__c = entityId;
                            }
                           
                            if(acc.name != companyName) {
                                accUpdate.name = companyName;
                                accList.add(accUpdate);
                            }
                            if(companyName == Null && acc.name != DisplayName) 
                                accUpdate.name = DisplayName;
                            if(acc.First_Name__c != givenName)
                                accUpdate.First_Name__c = givenName;
                            if(acc.Last_Name__c != familyName)
                                accUpdate.Last_Name__c = familyName;
                            if(acc.email__c != primaryEmail){
                                accUpdate.email__c = primaryEmail;
                                accUpdate.SalesforcePreviousValues__c +=' Email = '+acc.email__c+'\n';
                            }
                            if(acc.Mobile__c != primaryPhone){
                                accUpdate.Mobile__c = primaryPhone;
                                accUpdate.SalesforcePreviousValues__c +=' Mobile = '+acc.Mobile__c+'\n';
                            }
                            if(acc.Phone != mobilePhone){
                                accUpdate.Phone = mobilePhone;
                                accUpdate.SalesforcePreviousValues__c +=' Phone = '+acc.Phone+'\n';
                            }
                            if(acc.BillingPostalCode != postalCode){
                                accUpdate.BillingPostalCode = postalCode;
                                accUpdate.SalesforcePreviousValues__c +=' BillingPostalCode = '+acc.BillingPostalCode+'\n';
                            }
                            if(acc.BillingStreet != line){
                                accUpdate.BillingStreet = line;
                                accUpdate.SalesforcePreviousValues__c +=' BillingStreet = '+acc.BillingStreet+'\n';
                            }
                            if(acc.BillingCity != city){
                                accUpdate.BillingCity = city;  
                                accUpdate.SalesforcePreviousValues__c +=' BillingCity = '+acc.BillingCity+'\n';
                            }
                            if(acc.BillingState != CountrySubDivisionCode){
                                accUpdate.BillingState = CountrySubDivisionCode;
                                accUpdate.SalesforcePreviousValues__c +=' BillingState = '+acc.BillingState+'\n';
                            }
                            if(acc.BillingCountry != country){
                                accUpdate.BillingCountry = country;
                                accUpdate.SalesforcePreviousValues__c +=' BillingCountry = '+acc.BillingCountry+'\n';
                            }
                            if(acc.Account_Synced_to_QuickBooks__c == false){
                                accUpdate.Account_Synced_to_QuickBooks__c = true;
                                accUpdate.SalesforcePreviousValues__c +=' Account_Synced_to_QuickBooks__c = '+acc.Account_Synced_to_QuickBooks__c+'\n';
                            }
                            accList.add(accUpdate);
                            if(accList.size() > 0)
                            {
                                accList[0].SalesforcePreviousValues__c +=' QBO customerId = '+acc.QBO_customer_Id__c+'\n';
                                accList[0].SalesforcePreviousValues__c +=' Name = '+acc.name+'\n';
                            }
                            update accList;                                                             
                            System.debug('accUpdate' +accUpdate);
                        } 
                        else if(acc == null)
                        {//If Account Not Exist then Create the Account with QB Customer Information Received.
                            Account insertAcc = new Account();                            
                            if(companyName != null) //first company name if null then display name
                                insertAcc.name = companyName;
                            if(companyName == Null && DisplayName != Null)
                                insertAcc.name = DisplayName;
                            if(givenName != null)
                                insertAcc.First_Name__c = givenName ;
                            if(familyName != null)
                                insertAcc.Last_Name__c = familyName ;
                            insertAcc.email__c = primaryEmail;
                            insertAcc.Mobile__c = primaryPhone;
                            insertAcc.Phone = mobilePhone;
                            insertAcc.BillingStreet = line;
                            insertAcc.BillingState = CountrySubDivisionCode; 
                            insertAcc.BillingCity = city;  
                            insertAcc.BillingCountry = country;
                            insertAcc.BillingPostalCode = postalCode;
                            //insertAcc.AccountSource = 'Automatic - Quickbooks Recurring Opportunity Creation';
                            insertAcc.Account_Synced_to_QuickBooks__c = true;
                            insertAcc.QBO_customer_Id__c = entityId;
                            insert insertAcc;
                            System.debug('insertAcc' +insertAcc);
                        }
                    } 
                }
            }
            
            
            // if(operation == 'Update' && entityName == 'SalesReceipt'){ 
            if(operation == 'Create' && entityName == 'SalesReceipt'){ 
                
                Integer currentMonth =  date.newInstance(2024,01,15).month();//	Date.today().Month(); //				//date.newInstance(2023,12,01).month();
                Integer month;	
                month = currentMonth == 12? 1 : currentMonth + 1;
                Integer year;
                if(month == 1){
                    year = Date.today().addyears(+1).year();       
                }else{
                    year = Date.today().Year();
                }
                String day = String.valueOf(Date.today().day());
                Map<Integer,Date> OppcreationDateMap = new Map<Integer,Date>{1 => date.newInstance(year,02,01), 2 => date.newInstance(year,03,01), 3 =>date.newInstance(year,04,01), 4 =>date.newInstance(year,05,01), 5 =>date.newInstance(year,06,01), 6 =>date.newInstance(year,07,01), 7 =>date.newInstance(year,08,01), 8 =>date.newInstance(year,9,01), 9 =>date.newInstance(year,10,01), 10 =>date.newInstance(year,11,01), 11 =>date.newInstance(year,12,01), 12 =>date.newInstance(year,01,02)};
                    
                    qb_Metadata__mdt qb_Cred = QuickbooksUtil.quickbooksCred();   
                
                String accessToken = qb_Cred.access_token__c;
                string realmId = qb_Cred.realmId__c;
                string baseUrl = qb_cred.Environment__c == 'Production'?qb_cred.Prod_Base_URL__c:qb_Cred.Sanbdox_Base_URL__c;
                string minorVer = qb_Cred.minorversion__c;
                
                HttpRequest req = new HttpRequest();
                req.setEndpoint(Test.isRunningTest() ? 'https://sandbox-quickbooks.api.intuit.com/v3/company/4620816365244111840/SalesReceipt/query?minorversion=65': baseUrl+'/v3/company/'+realmId+'/query?minorversion='+minorVer);
                req.setMethod('POST');
                req.setBody('select CustomerRef, Line, RecurDataRef from SalesReceipt where id=\''+entityId+'\'');
                req.setHeader('Authorization', 'Bearer '  + accessToken);
                req.setheader('Accept', 'application/json');
                req.setHeader('Content-Type', 'application/text');
                Http http = new Http();
                string errorMessage = '';
                List<Product2> prodList = new  List<Product2>();
                
                HttpResponse res = http.send(req);
                system.debug('req.body:1st: :'+req.getbody());
                
                try{
                    List<Customer_Product__c> cpList = new List<Customer_Product__c>();
                    if (res.getStatusCode() == 200) {
                        system.debug('str:: :'+res.getBody());
                        Map<String, Object> deserializeJson = (Map<String, Object>) JSON.deserializeUntyped(res.getBody());
                        Map<String, Object> queryResponseMap = (Map<String, Object>) deserializeJson.get('QueryResponse');                   
                        List<Object> salesReceiptList = (List<Object>) queryResponseMap.get('SalesReceipt');
                        Map<String,Object> salesReceiptMap = (Map<String,Object>) salesReceiptList[0];
                        if(salesReceiptMap.containsKey('RecurDataRef') && salesReceiptMap.get('RecurDataRef') != null){
                            Map<String,Object> recurDataRefMap = (Map<String,Object>) salesReceiptMap.get('RecurDataRef');
                            String recurIdRef = (String) recurDataRefMap.get('value');
                            HttpRequest req3 = new HttpRequest();
                            req3.setEndpoint(Test.isRunningTest() ? 'https://sandbox-quickbooks.api.intuit.com/v3/company/4620816365244111840/RecurringTransaction/query?minorversion=65' : baseUrl+'/v3/company/'+realmId+'/query?minorversion='+minorVer);
                            req3.setMethod('POST');
                            req3.setBody('Select RecurringInfo From RecurringTransaction where RecurDataRef =\''+recurIdRef+'\'');
                            req3.setHeader('Authorization', 'Bearer '  + accessToken);
                            req3.setheader('Accept', 'application/json');
                            req3.setHeader('Content-Type', 'application/text');
                            Http http3 = new Http();
                            HttpResponse res3 = http.send(req3);
                            if (res3.getStatusCode() == 200) {
                                system.debug('str:: :'+res3.getBody());
                                Map<String, Object> deserializeJsonRecurringTransaction = (Map<String, Object>) JSON.deserializeUntyped(res3.getBody());
                                Map<String, Object> queryResponseRecTransMap = (Map<String, Object>) deserializeJsonRecurringTransaction.get('QueryResponse');                   
                                List<Object> recurringTransactionList = (List<Object>) queryResponseRecTransMap.get('RecurringTransaction');
                                Map<String,Object> recurringTransactionMap = (Map<String,Object>) recurringTransactionList[0];
                                Map<String,Object> salesReiptMap = (Map<String,Object>) recurringTransactionMap.get('SalesReceipt');
                                Map<String,Object> recurringInfoMap = (Map<String,Object>) salesReiptMap.get('RecurringInfo');
                                Map<String,Object> scheduleInfoMap = (Map<String,Object>) recurringInfoMap.get('ScheduleInfo');
                                System.debug('Date: ::'+(String) scheduleInfoMap.get('StartDate'));
                                Date subStartDate = scheduleInfoMap.containsKey('StartDate') ? Date.valueOf((String) scheduleInfoMap.get('StartDate')) : null;
                                Date subNextDate = scheduleInfoMap.containsKey('NextDate') ? Date.valueOf((String) scheduleInfoMap.get('NextDate')) : null;
                                Date subEndDate = scheduleInfoMap.containsKey('EndDate') ? Date.valueOf((String) scheduleInfoMap.get('EndDate')) : null;
                                integer DaysBefore = scheduleInfoMap.containsKey('DaysBefore') ? integer.valueOf(scheduleInfoMap.get('DaysBefore')) : null;
                                string RecurringInfoName = recurringInfoMap.containsKey('Name') ? String.valueOf(recurringInfoMap.get('Name')) : null;
                                system.debug('subNextDate = '+subNextDate);
                                List<Object> lineList = (List<Object>) salesReceiptMap.get('Line');                               
                                Map<String,Object> customerRefMap = (Map<String,Object>) salesReceiptMap.get('CustomerRef');
                                String customerId = (string) customerRefMap.get('value');  
                                system.debug('Test PS1 customerId:: :'+customerId);
                                Account acc = new Account();
                                try{
                                    acc = [Select id from Account where QBO_customer_Id__c = :customerId Limit 1];
                                }catch (Exception e) {
                                    acc = null;
                                }
                                Map<String,String> lineIdDescQbMap = new Map<String,String>();
                                Map<String,Decimal> DescAmountQbMap = new Map<String,Decimal>();
                                Map<String,String> lineIdProdIdQb = new  Map<String,String>();
                                for(Object eachLine :lineList){
                                    Map<String,Object> eachSalesItemLineDetailMap = (Map<String,Object>) eachLine; 
                                    String lineId = (String) eachSalesItemLineDetailMap.get('Id');
                                    String lineDecs = eachSalesItemLineDetailMap.containsKey('Description') && eachSalesItemLineDetailMap.get('Description') != null ? (String) eachSalesItemLineDetailMap.get('Description')+' [Line: '+lineId+']' : '[Description Not Provided in QuickBooks - Line: '+ lineId+']';
                                    if(eachSalesItemLineDetailMap.containsKey('SalesItemLineDetail')){
                                        Map<String,Object> salesItemLineDetailMap =  (Map<String,Object>) eachSalesItemLineDetailMap.get('SalesItemLineDetail');  
                                        Map<String,Object> itemRefMap = (Map<String,Object>) salesItemLineDetailMap.get('ItemRef');    
                                        String productId = String.valueOf(itemRefMap.get('value'));
                                        Decimal lineXAmount = eachSalesItemLineDetailMap.containsKey('Amount') ? (Decimal) eachSalesItemLineDetailMap.get('Amount') : null;
                                        DescAmountQbMap.put(lineDecs,lineXAmount);
                                        
                                        lineIdDescQbMap.put(lineId,lineDecs);
                                        lineIdProdIdQb.put(lineId,productId);
                                    }
                                }
                                
                                prodList = [Select Id,Quickbooks_ProductId__c,Name from Product2 Where Quickbooks_ProductId__c =:lineIdProdIdQb.values() AND (Name = 'Company Renewals (Annual Report)' OR Name = 'State Sales Tax Filings' OR Name = 'Accounting/Bookkeeping Services' OR Name Like '%Payroll%' OR Name = 'Accounting and Advising' OR Name = 'Business Consulting' OR Name = 'Registered Agent & Virtual Office' OR Name = 'Quarterly Estimated Tax Payments')];
                                Map<String, String> qbProIdsfproIdMap = new Map<String, String>(); 
                                Map<String, String> qbProIdSFProNameMap = new Map<String, String>();//
                                Map<String, String> qbProIdsfproIdNoOppMap = new Map<String, String>();                           
                                Set<Id> prodIdSfSet = new Set<Id>();
                                Map<String, String> qbProIdsfproIdAllMap = new Map<String, String>();                           
                                for(Product2 proSf :prodList){
                                    if(proSf.Name == 'Company Renewals (Annual Report)' || proSf.Name == 'State Sales Tax Filings' || proSf.Name == 'Accounting/Bookkeeping Services'  || proSf.Name == 'Business Consulting'  || proSf.Name == 'Quarterly Estimated Tax Payments' || proSf.Name.contains('Payroll')){
                                        qbProIdsfproIdMap.put(proSf.Quickbooks_ProductId__c,proSf.id);
                                        qbProIdSFProNameMap.put(proSf.Quickbooks_ProductId__c, proSf.Name);//
                                        qbProIdsfproIdAllMap.put(proSf.Quickbooks_ProductId__c, proSf.Id);//
                                        prodIdSfSet.add(proSf.id);
                                    }else if(proSf.Name == 'Registered Agent & Virtual Office' || proSf.Name == 'Accounting and Advising'){
                                        qbProIdsfproIdNoOppMap.put(proSf.Quickbooks_ProductId__c,proSf.id);
                                        qbProIdsfproIdAllMap.put(proSf.Quickbooks_ProductId__c, proSf.Id);//
                                        prodIdSfSet.add(proSf.id);
                                    }
                                }
                                if(prodList != null && prodList.size() > 0){
                                    if(acc == null){                                
                                        HttpRequest req2 = new HttpRequest();
                                        req2.setEndpoint(Test.isRunningTest() ? 'https://sandbox-quickbooks.api.intuit.com/v3/company/4620816365244111840/Customer/query?minorversion=65' :  baseUrl+'/v3/company/'+realmId+'/query?minorversion='+minorVer);
                                        req2.setMethod('POST');
                                        req2.setBody('select * from Customer Where id=\''+customerId+'\'');
                                        req2.setHeader('Authorization', 'Bearer '  + accessToken);
                                        req2.setheader('Accept', 'application/json');
                                        req2.setHeader('Content-Type', 'application/text');
                                        Http http2 = new Http();
                                        HttpResponse res2 = http2.send(req2);
                                        if (res2.getStatusCode() == 200) {
                                            system.debug('res2.getBody:: :'+res2.getBody());
                                            Map<String, Object> deserializeJson2 = (Map<String, Object>) JSON.deserializeUntyped(res2.getBody());
                                            Map<String, Object> QueryResponseMap2 = (Map<String, Object>) deserializeJson2.get('QueryResponse');
                                            
                                            List<Object> customerList = (List<Object>) QueryResponseMap2.get('Customer');    
                                            Map<String, Object> customerIndex = (Map<String, Object>) customerList[0];
                                            
                                            String companyName = (customerIndex.containsKey('CompanyName')) ? (String)customerIndex.get('CompanyName') : null;
                                            String primaryEmail = '';
                                            Map<String,Object> primaryEmailAddrMap = (customerIndex != null && customerIndex.containsKey('PrimaryEmailAddr')) ? (Map<String,Object>) customerIndex.get('PrimaryEmailAddr') : null;
                                            primaryEmail = (primaryEmailAddrMap != NULL && primaryEmailAddrMap.containsKey('Address')) ? (String) primaryEmailAddrMap.get('Address') : '';                                        
                                            Map<String, Object> primaryPhoneMap = (customerIndex.containsKey('PrimaryPhone')) ? (Map<String, Object>) customerIndex.get('PrimaryPhone') : null;
                                            String primaryPhone = (primaryPhoneMap != null) &&  primaryPhoneMap.get('FreeFormNumber') != null ? (String) primaryPhoneMap.get('FreeFormNumber') : null;
                                            Map<String,Object> mobileMap =(customerIndex.containsKey('Mobile')) ? (Map<String,Object>) customerIndex.get('Mobile') : null;
                                            String mobilePhone = (mobileMap != null && mobileMap.containsKey('FreeFormNumber')) ? (String) mobileMap.get('FreeFormNumber') : '';
                                            String displayName = (customerIndex.containsKey('DisplayName') &&  customerIndex.get('DisplayName') != null) ? (String) customerIndex.get('DisplayName') : '';
                                            String givenName = (customerIndex.containsKey('GivenName') &&  customerIndex.get('GivenName') != null) ? (String) customerIndex.get('GivenName') : '';
                                            String familyName = (customerIndex.containsKey('FamilyName') && customerIndex.get('FamilyName') != null) ? (String) customerIndex.get('FamilyName') : '';
                                            String individualName = (givenName + ' ' + familyName).trim();
                                            String  displayNameWithoutComa = displayName.replace(',', '');
                                            Account acc2 ;
                                            Contact conQue ;
                                            //New Changes
                                            if(companyName != null && companyName != ''){
                                                try{
                                                    acc2= [Select Id From Account Where Name =:companyName Limit 1];
                                                }catch(exception e){
                                                    acc2 = null;
                                                }
                                            } 
                                            if(displayName != null & displayName != '' && acc2 == null){
                                                try{
                                                    acc2= [Select Id From Account Where Name =:displayName Limit 1];
                                                }catch(exception e){
                                                    acc2 = null;
                                                }
                                            }  
                                            if(displayNameWithoutComa != null && displayNameWithoutComa != '' && acc2 == null){
                                                try{
                                                    acc2= [Select Id From Account Where Name =:displayNameWithoutComa Limit 1];
                                                }catch(exception e){
                                                    acc2 = null;
                                                }
                                            }
                                            
                                            if(acc2 != null){
                                                acc = acc2;
                                                Account accUpdate = new Account();
                                                accUpdate.id= acc.id;
                                                accUpdate.QBO_customer_Id__c = customerId;
                                                update accUpdate; 
                                            }else {
                                                Account acc3 = new Account();                            
                                                if(companyName != null && companyName != ''){
                                                    acc3.name = companyName;
                                                    acc3.Type__c = 'Business';
                                                } else if(displayName != null & displayName != ''){
                                                    acc3.name = displayName;
                                                    acc3.Type__c = 'Business';
                                                }else{
                                                    acc3.name = individualName;
                                                    acc3.Type__c = 'Individual';
                                                    acc3.First_Name__c = givenName ;
                                                    acc3.Last_Name__c = familyName ;
                                                }
                                                acc3.Email__c = primaryEmail;
                                                acc3.Phone = primaryPhone;
                                                acc3.AccountSource = 'Automatic - Quickbooks Recurring Opportunity Creation';
                                                acc3.QBO_customer_Id__c = customerId;
                                                insert acc3;
                                                
                                                Contact con = new Contact();
                                                con.FirstName = givenName;
                                                con.LastName = familyName == ''  ? givenName == '' ? displayName :givenName : familyName;
                                                con.MobilePhone = mobilePhone;
                                                con.Contact_Source__c = 'Automatic - Quickbooks Recurring Opportunity Creation';
                                                con.Phone = primaryPhone;
                                                con.email = primaryEmail;
                                                con.AccountId = acc3.Id;
                                                insert con;
                                                acc = acc3;
                                            }
                                            
                                            //New Changes End
                                            /*         if(primaryEmail != null && primaryEmail != ''){
try{
acc2= [Select Id From Account Where Email__c =:primaryEmail Limit 1];
}catch(exception e){
acc2 = null;
}
}
if(acc2 == null && primaryEmail != null && primaryEmail != ''){
try{
conQue = [Select Id, AccountId From Contact Where Email =:primaryEmail AND AccountId != null Limit 1];
}catch(exception e){
conQue = null;
}
if(conQue != null){
try{
acc2= [Select Id From Account Where id =:conQue.AccountId Limit 1];

}catch(exception e){
conQue = null;
}
}
}
if(companyName != null && acc2 == null){
try{
acc2= [Select Id From Account Where Name =:companyName Limit 1];
}catch(exception e){
acc2 = null;
}
}
else{
if(individualName != '' && acc2 == null){                                            
try{
acc2= [Select Id From Account Where Name =:individualName Limit 1];
}catch(exception e){
acc2 = null; 
}
}
}                                    
//Final Execution
if(acc2 != null){
acc = acc2;
Account accUpdate = new Account();
accUpdate.id= acc.id;
accUpdate.QBO_customer_Id__c = customerId;
update accUpdate;                                                                      
} else {
Account acc3 = new Account();                            
if(companyName != null){
acc3.name = companyName;
acc3.Type__c = 'Business';
}else{
acc3.name = individualName;
acc3.Type__c = 'Individual';
acc3.First_Name__c = givenName ;
acc3.Last_Name__c = familyName ;
}
acc3.Email__c = primaryEmail;
acc3.Phone = primaryPhone;
acc3.AccountSource = 'Automatic - Quickbooks Recurring Opportunity Creation';
acc3.QBO_customer_Id__c = customerId;
insert acc3;

Contact con = new Contact();
con.FirstName = givenName;

con.LastName = familyName == ''  ? givenName : familyName;
con.MobilePhone = mobilePhone;
con.Contact_Source__c = 'Automatic - Quickbooks Recurring Opportunity Creation';
con.Phone = primaryPhone;
con.email = primaryEmail;
con.AccountId = acc3.Id;
insert con;
acc = acc3;
}     */                               
                                        } 
                                    } 
                                    if(acc != null){
                                        List<String> proIdSfSet = new List<String>();
                                        List<String> proIdQbInProgrSf = new List<String>();
                                        List<Customer_Product__c> cpLst = [Select Id, Product__c, Status__c,Product__r.Quickbooks_ProductId__c From Customer_Product__c Where Account__c = :acc.Id AND (Product__r.Name = 'Accounting and Advising' OR Product__r.Name = 'Registered Agent & Virtual Office')];
                                        for(Customer_Product__c cp :cpLst){
                                            proIdSfSet.add(cp.Product__r.Quickbooks_ProductId__c);
                                            if(cp.Status__c == 'In-Progress'){
                                                proIdQbInProgrSf.add(cp.Product__r.Quickbooks_ProductId__c);
                                            }
                                        }
                                        
                                        Decimal totalSubscrAmount;
                                        for(String line :lineIdProdIdQb.keySet()){
                                            if(qbProIdsfproIdMap.containsKey(lineIdProdIdQb.get(line)) && !proIdSfSet.contains(lineIdProdIdQb.get(line))){
                                                Customer_Product__c cp = new Customer_Product__c();
                                                cp.Account__c = acc.id;
                                                cp.Product__c = qbProIdsfproIdMap.get(lineIdProdIdQb.get(line));
                                                if(qbProIdSFProNameMap.containsKey(lineIdProdIdQb.get(line)) && qbProIdSFProNameMap.get(lineIdProdIdQb.get(line)) == 'Accounting/Bookkeeping Services'){
                                                    cp.Create_Opportunity__c = FALSE;//
                                                    cp.Create_Opportunity_on__c = OppcreationDateMap.get(currentMonth);
                                                    cp.EntityId__c = entityId;
                                                }else if (qbProIdSFProNameMap.containsKey(lineIdProdIdQb.get(line)) && (qbProIdSFProNameMap.get(lineIdProdIdQb.get(line)) == 'business consulting' || qbProIdSFProNameMap.get(lineIdProdIdQb.get(line)) == 'Quarterly Estimated Tax Payments') && (currentMonth == 3 || currentMonth== 6 || currentMonth == 9  || currentMonth == 12)) {
                                                    cp.Create_Opportunity__c = FALSE;//
                                                    cp.Create_Opportunity_on__c = OppcreationDateMap.get(currentMonth);
                                                    cp.EntityId__c = entityId;
                                                } else{//
                                                    cp.Create_Opportunity__c = TRUE;
                                                }//
                                                cp.Status__c = 'In-Progress';
                                                cp.Customer_Product_Source__c = 'Automatic - Quickbooks Recurring Opportunity Creation';
                                                cp.Description__c = lineIdDescQbMap.get(line);
                                                if (!(qbProIdSFProNameMap.containsKey(lineIdProdIdQb.get(line)) && (qbProIdSFProNameMap.get(lineIdProdIdQb.get(line)) == 'business consulting' || qbProIdSFProNameMap.get(lineIdProdIdQb.get(line)) == 'Quarterly Estimated Tax Payments') && !(currentMonth == 3 || currentMonth == 6 || currentMonth == 9  || currentMonth == 12)))
                                                    cpList.add(cp);
                                                if(totalSubscrAmount != null){
                                                    totalSubscrAmount = totalSubscrAmount + DescAmountQbMap.get(lineIdDescQbMap.get(line));                                            
                                                }else{   
                                                    totalSubscrAmount = DescAmountQbMap.get(lineIdDescQbMap.get(line));  
                                                }                                        
                                            }
                                            else if(qbProIdsfproIdNoOppMap.containsKey(lineIdProdIdQb.get(line)) && !proIdQbInProgrSf.contains(lineIdProdIdQb.get(line))){
                                                Customer_Product__c cp = new Customer_Product__c();
                                                cp.Account__c = acc.id;
                                                cp.Product__c = qbProIdsfproIdNoOppMap.get(lineIdProdIdQb.get(line));
                                                cp.Create_Opportunity__c = FALSE;
                                                cp.Status__c = 'In-Progress';
                                                cp.Customer_Product_Source__c = 'Automatic - Quickbooks Recurring Opportunity Creation';
                                                cp.Description__c = lineIdDescQbMap.get(line);
                                                cpList.add(cp);
                                                if(totalSubscrAmount != null){
                                                    totalSubscrAmount = totalSubscrAmount + DescAmountQbMap.get(lineIdDescQbMap.get(line));                                            
                                                }else{   
                                                    totalSubscrAmount = DescAmountQbMap.get(lineIdDescQbMap.get(line));  
                                                }  
                                            }
                                        }
                                        List<Opportunity> oppList;
                                        List<Opportunity> oppNewList;
                                        List<Payment__c> payNewList = new List<Payment__c>();
                                        List<Subscription__c> subNewList = new List<Subscription__c>();
                                        List<OpportunityLineItem> oliNewListUpdate = new List<OpportunityLineItem>();                                        
                                        List<OpportunityLineItem> opplineList = new List<OpportunityLineItem>();
                                     
                                        
                                        
                                        Subscription__c subscrip= new Subscription__c();  
                                        subscrip.Opportunities_Name__c = 'Subscription Initiated from QuickBooks - Name : '+RecurringInfoName;

                                        Subscription__c sub;
                                        List<Subscription__c> subList; 
                                        try{
                                            system.debug('recurIdRef:: :'+recurIdRef);
                                            subList = [Select Id,Name,Opportunity__c,Opportunities__c,Opportunities_Name__c,Customer__c,Subscription_Status__c From Subscription__c Where Subscription_Type__c = 'Quickbooks' AND Subscription_Status__c = 'Active' AND QuickBooks_Recurring_Transaction_Id__c = :recurIdRef]; //Opportunity__c =: oppList AND 
                                        } catch(Exception e){
                                            sub = null;
                                            subList = null;
                                        }
                                        List<Subscription__c> inActiveList = new  List<Subscription__c>();
                                        if(subList != null && subList.size() > 0){
                                            for(Subscription__c s :subList){
                                                if(s.Customer__c != acc.Id){
                                                    Subscription__c subInactive = new Subscription__c();
                                                    subInactive.Id = s.Id;
                                                    subInactive.Subscription_Status__c = 'Ended';
                                                    inActiveList.add(subInactive);
                                                    system.debug('Test :: :Sub Number:: :'+s.Name);
                                                    
                                                }else if(s.Customer__c == acc.Id && sub == null){
                                                    sub = s;
                                                    system.debug('Test :: :Sub Number:: :'+s.Name);
                                                    system.debug('Test :: :s. Subscription Assignment');
                                                } else if(s.Customer__c == acc.Id && sub != null){
                                                    Subscription__c subInactive = new Subscription__c();
                                                    subInactive.Id = s.Id;
                                                    subInactive.Subscription_Status__c = 'Ended';
                                                    inActiveList.add(subInactive);
                                                    system.debug('Test :: :Sub Number:: :'+s.Name);
                                                }
                                            }
                                        }
                                        if(inActiveList != null && inActiveList.size() > 0){
                                            system.debug('Test :: :inActiveList:: :'+inActiveList);
                                            update inActiveList;
                                        }
                                        for(Subscription__c s :inActiveList){
                                            system.debug('subName:: :'+s.Name+'  :: : Status:: :'+s.Subscription_Status__c);
                                        }
                                        if(sub == null){

                                            subscrip.Subscription_Amount__c = totalSubscrAmount;
                                            subscrip.Subscription_Type__c = 'Quickbooks';
                                            subscrip.Subscription_Status__c = 'Active';
                                            subscrip.QuickBooks_Recurring_Transaction_Id__c = recurIdRef;
                                            subscrip.Create_Subscription_in_Stripe__c = false;
                                            subscrip.Customer__c = acc.id;
                                            subscrip.Sales_Receipt_Date__c = System.today();
                                            subscrip.Subscription_Start_date__c = subStartDate;
                                            subscrip.Subscription_End_date__c = subEndDate;
                                            subscrip.Subscription_Next_Date__c = subNextDate;
                                            subscrip.DaysBefore__c = DaysBefore;
                                            insert subscrip;                                      
                                        }
                                        else if(sub != null){
                                            subscrip.id = sub.id;
                                            subscrip.Subscription_Next_Date__c = subNextDate;
                                            subscrip.Subscription_End_date__c = subEndDate;
                                            if(sub.Subscription_Status__c == 'Paused' || sub.Subscription_Status__c == 'Day Skipped')
                                                subscrip.Subscription_Status__c = 'Active';
                                            subscrip.DaysBefore__c = DaysBefore;
                                            update subscrip;
                                        }
                                        
                                        if(cpList != null && cpList.size() > 0){
                                            insert cpList;
                                            
                                            oppList = [Select Id,AccountId,Name,Customer_Product__r.Description__c,Description From Opportunity Where Customer_Product__c =:cpList];
                                            System.debug('oppList:: :'+oppList);
                                            System.debug('oppListsize:: :'+oppList.size());
                                            oppNewList = new List<Opportunity>();
                                            Map<String,String> oppIdDescMap = new Map<String,String>();
                                            
                                            for(Opportunity opp :oppList){
                                                Opportunity oppor = new Opportunity();
                                                oppor.Id = opp.id;
                                                oppor.StageName = 'Paid';
                                                oppor.Payment_Mode__c = 'Automatic';
                                                oppor.Payment_Status__c = 'Paid';
                                                oppor.Payment_Status_update_by_Stripe__c = true;
                                                oppor.Description = opp.Customer_Product__r.Description__c;
                                                oppIdDescMap.put(opp.id,opp.Customer_Product__r.Description__c);
                                                oppNewList.add(oppor);
                                                
                                            }
                    
                                            //New Changes 11/15
                                            
                                            opplineList = [Select Id,OpportunityId,Product2.Quickbooks_ProductId__c,Opportunity.Customer_Product__c,Opportunity.Customer_Product__r.Description__c From OpportunityLineItem Where OpportunityId =:oppList];
                                            
                                            
                                            system.debug('123:: :prodIdSfSet:: :'+prodIdSfSet);
                                            system.debug('123:: :subscrip.Id:: :'+subscrip.Id);
                                            
                                            //Subscription Line Item Creation
                                            // Moved by Shankar
                                            //Subscription Line Item Creation
                                            
                                            //     Create Payment after subscription created
                                            //     Moved By Shankara
                                            //      Create Payment after subscription created
                                            //Changes End
                                            if(opplineList != null && opplineList.size() > 0){
                                                if(oppList != null && oppList.size() > 0){
                                                    system.debug('Des - recurIdRef:: :'+recurIdRef);
                                                    /*    try{
sub = [Select Id,Opportunity__c,Opportunities__c,Opportunities_Name__c,Customer__c,Subscription_Status__c From Subscription__c Where Subscription_Type__c = 'Quickbooks' AND Subscription_Status__c = 'Active' AND QuickBooks_Recurring_Transaction_Id__c = :recurIdRef Limit 1]; //Opportunity__c =: oppList AND 
} catch(Exception e){
sub = null;
}
if(sub == null){
System.debug('Test PS1 Subscription');
subscrip.Opportunity__c = oppList != null && oppList.size() == 1 ? oppList[0].Id : null;                                           
subscrip.Opportunities_Name__c = oppList != null && oppList.size() > 1 ? oppNames : null;
subscrip.Opportunities__c = oppList != null && oppList.size() > 1 ? oppIds : null;
subscrip.Subscription_Type__c = 'Quickbooks';
subscrip.Subscription_Status__c = 'Active';
subscrip.QuickBooks_Recurring_Transaction_Id__c = recurIdRef;
subscrip.Create_Subscription_in_Stripe__c = false;
subscrip.Customer__c = acc.id;
subscrip.Subscription_Amount__c = totalSubscrAmount;
subscrip.Sales_Receipt_Date__c = System.today();
subscrip.Subscription_Start_date__c = subStartDate;
subscrip.Subscription_End_date__c = subEndDate;
subscrip.Subscription_Next_Date__c = subNextDate;
subscrip.DaysBefore__c = DaysBefore;
insert subscrip;                                      
}
else if(sub != null){
subscrip.id = sub.id;
if(Sub.Opportunity__c != Null && (sub.Opportunities__c == Null || sub.Opportunities_Name__c == Null)) {
subscrip.Opportunities_Name__c = oppList != null && oppList.size() > 1 ? oppNames : null;
subscrip.Opportunities__c = oppList != null && oppList.size() > 1 ? oppIds : null;
}
subscrip.Subscription_Next_Date__c = subNextDate;
subscrip.Subscription_End_date__c = subEndDate;
if(sub.Subscription_Status__c == 'Paused' || sub.Subscription_Status__c == 'Day Skipped')
subscrip.Subscription_Status__c = 'Active';
subscrip.DaysBefore__c = DaysBefore;
update subscrip;
} */
                                                    
                                                    //***********Close Customer Product***************//
                                                    //   Moved By Shankara
                                                    //***********Close Customer Product***************//
                                                    
                                                    for(OpportunityLineItem oli :opplineList){
                                                        OpportunityLineItem oliNew = new OpportunityLineItem();
                                                        oliNew.id = oli.id;
                                                        oliNew.UnitPrice = DescAmountQbMap.get(oli.Opportunity.Customer_Product__r.Description__c);
                                                        oliNewListUpdate.add(oliNew);
                                                    }
                                                    for(Opportunity opp :oppList){
                                                        Payment__c pay = new Payment__c();
                                                        System.debug('Test PS1 Payment');
                                                        pay.QB_Sales_Receipt_ID__c = entityId;
                                                        pay.Customer__c = opp.AccountId;
                                                        pay.Opportunity__c = opp.Id;
                                                        pay.Payment_Type__c = 'Quickbooks - Subscription';
                                                        pay.Payment_Status__c = 'Succeeded';
                                                        pay.Payment_Amount__c = DescAmountQbMap.get(opp.Customer_Product__r.Description__c);
                                                        system.debug('opp:: :'+opp.Name+ '   ---   Payment Amount:: :'+DescAmountQbMap.get(opp.Customer_Product__r.Description__c));
                                                        pay.Create_Payment_in_Stripe__c = False;
                                                        if(sub == null){
                                                            pay.Subscription__c = subscrip.Id;    
                                                        }else if(sub != null){
                                                            pay.Subscription__c = sub.Id;                                                    
                                                        }
                                                        payNewList.add(pay);
                                                    } 
                                                    
                                                }
                                                if(oliNewListUpdate != null && oliNewListUpdate.size() > 0){
                                                    update oliNewListUpdate;
                                                }
                                            }
                                        }
                                        
                                        //***********Close Customer Product***************//
                                        List<Customer_Product__c> cusProdList = [Select id,Status__c from Customer_Product__c where Account__c =: acc.id AND Product__c =: qbProIdsfproIdMap.values() AND Customer_Product_Source__c = 'Automatic - Quickbooks Recurring Opportunity Creation' and id not in : cpList and Status__c != 'Closed'];
                                        List<Customer_Product__c> updateCusProdList = new List<Customer_Product__c>();
                                        for(Customer_Product__c cusPro:cusProdList){
                                            Customer_Product__c cp = new Customer_Product__c();
                                            cp.id = cusPro.id;
                                            cp.Status__c = 'Closed';
                                            updateCusProdList.add(cp);
                                        }
                                        if(updateCusProdList != Null && updateCusProdList.size()>0){
                                            update updateCusProdList;          
                                        }
                                        
                                        //Subscription Line Item Creation
                                        List<Subscription_Line_Item__c> subLine = [Select Id,Product__c,Subscription_Amount__c From Subscription_Line_Item__c Where Subscription__c =:subscrip.Id];
                                        Set<String> prodIdSet = new Set<String>();
                                        for(Subscription_Line_Item__c eachLine :subLine){
                                            prodIdSet.add(eachLine.Product__c);  
                                        }
                                        
                                        Set<String> prodIdLineSet = new Set<String>();
                                        Set<String> prodIdLineContainsSet = new Set<String>();
                                        for(String line :lineIdProdIdQb.keySet()){
                                            if(qbProIdsfproIdAllMap.containsKey(lineIdProdIdQb.get(line)) && prodIdSet.contains(qbProIdsfproIdAllMap.get(lineIdProdIdQb.get(line)))){
                                                prodIdLineContainsSet.add(qbProIdsfproIdAllMap.get(lineIdProdIdQb.get(line)));
                                            }
                                            if(qbProIdsfproIdAllMap.containsKey(lineIdProdIdQb.get(line)) && !prodIdSet.contains(qbProIdsfproIdAllMap.get(lineIdProdIdQb.get(line)))){
                                                prodIdLineSet.add(qbProIdsfproIdAllMap.get(lineIdProdIdQb.get(line)));
                                                system.debug('qbProIdsfproIdAllMap.get(lineIdProdIdQb.get(line)):: :'+qbProIdsfproIdAllMap.get(lineIdProdIdQb.get(line)));
                                            }
                                        }
                                        
                                        Set<Id> prodIdLineInactiveSet = new Set<Id>();
                                        for(String prdId :prodIdSet){
                                            if(!prodIdLineSet.contains(prdId) && !prodIdLineContainsSet.contains(prdId)){
                                                prodIdLineInactiveSet.add(prdId);
                                            }
                                        }
                                        List<Subscription_Line_Item__c> subLineUpdateList = new List<Subscription_Line_Item__c>();
                                        if(prodIdLineInactiveSet != null && prodIdLineInactiveSet.size() > 0){
                                            for(Subscription_Line_Item__c eachLine :subLine){
                                                if(prodIdLineInactiveSet.contains(eachLine.Product__c)){
                                                    Subscription_Line_Item__c subInsert = new Subscription_Line_Item__c();
                                                    subInsert.Id= eachLine.Id;
                                                    subInsert.Subscription_Line_Item_Status__c = 'Canceled';
                                                    subLineUpdateList.add(subInsert);
                                                }
                                            }
                                        }
                                        if(subLineUpdateList != null && subLineUpdateList.size() > 0){
                                            update subLineUpdateList;
                                        }
                                        
                                        List<Subscription_Line_Item__c> subLineInsertList = new List<Subscription_Line_Item__c>();
                                        if(prodIdLineSet != null && prodIdLineSet.size() > 0){
                                            for(String prodId :prodIdLineSet){
                                                Subscription_Line_Item__c subInsert = new Subscription_Line_Item__c();
                                                system.debug('Id.valueOf(prodId):: :'+Id.valueOf(prodId));
                                                subInsert.Product__c = Id.valueOf(prodId);
                                                subInsert.Subscription__c = subscrip.Id;
                                                subInsert.Subscription_Line_Item_Status__c = 'Active';
                                                subInsert.Create_Line_Item_in_Stripe__c = false;
                                                subLineInsertList.add(subInsert);
                                            }
                                        }
                                        if(subLineInsertList != null && subLineInsertList.size() > 0){
                                            insert subLineInsertList;
                                        }
                                        
                                        for(String line :lineIdProdIdQb.keySet()){
                                            if(qbProIdsfproIdMap.containsKey(lineIdProdIdQb.get(line)) && !proIdSfSet.contains(lineIdProdIdQb.get(line))){
                                                if(qbProIdSFProNameMap.containsKey(lineIdProdIdQb.get(line)) && (qbProIdSFProNameMap.get(lineIdProdIdQb.get(line)) == 'Accounting/Bookkeeping Services' || qbProIdSFProNameMap.get(lineIdProdIdQb.get(line)) == 'Business Consulting' || qbProIdSFProNameMap.get(lineIdProdIdQb.get(line)) == 'Quarterly Estimated Tax Payments')){
                                                    
                                                    Payment__c pay = new Payment__c();
                                                    System.debug('Test PS1 Payment');
                                                    pay.QB_Sales_Receipt_ID__c = entityId;
                                                    pay.Customer__c = acc.id;
                                                    pay.Payment_Type__c = 'Quickbooks - Subscription';
                                                    pay.Payment_Status__c = 'Succeeded';
                                                    pay.Payment_Amount__c = DescAmountQbMap.get(lineIdDescQbMap.get(line));
                                                    pay.Opportunities_Name__c = (currentMonth == 1 || currentMonth == 2 || currentMonth == 3) ? 'Opportunity Will be created On : '+string.valueOf(OppcreationDateMap.get(3)).remove(' 00:00:00'): (currentMonth == 4 || currentMonth == 5 || currentMonth == 6) ? 'Opportunity Will be created On : '+string.valueOf(OppcreationDateMap.get(6)).remove(' 00:00:00'): (currentMonth == 7 || currentMonth == 8 || currentMonth == 9) ? 'Opportunity Will be created On : '+string.valueOf(OppcreationDateMap.get(9)).remove(' 00:00:00'): (currentMonth == 10 || currentMonth == 11 || currentMonth == 12) ? 'Opportunity Will be created On : '+string.valueOf(OppcreationDateMap.get(12)).remove(' 00:00:00'):Null;
                                                    system.debug('Test 123:: :line'+line +'  :: :DescAmountQbMap.get(lineIdDescQbMap.get(line)):: :'+DescAmountQbMap.get(lineIdDescQbMap.get(line)));
                                                    pay.Create_Payment_in_Stripe__c = False;
                                                    if(sub == null){
                                                        pay.Subscription__c = subscrip.Id;    
                                                    }else if(sub != null){
                                                        pay.Subscription__c = sub.Id;                                                    
                                                    }
                                                    payNewList.add(pay);
                                                }
                                            }
                                        }
                                        
                                        if(payNewList != null && payNewList.size() > 0){
                                            insert payNewList;
                                        }
                                    }
                                } 
                            }
                        }
                    }
                }
                catch(System.Exception e){
                    String endPoint = qb_Cred.Environment__c == 'Sandbox'?qb_Cred.Sanbdox_Base_URL__c : qb_Cred.Prod_Base_URL__c;
                    if(String.valueOf(e.getMessage()).startsWith('Unauthorized endpoint')){
                        errorMessage = 'Unauthorize endpoint: An Administer must go to Setup -> Administer -> Security Control ->'
                            +' Remote Site Setting and add '+' '+ endPoint +' Endpoint';
                    }else{
                        errorMessage = 'Unexpected Error while communicating with API. '  
                            +'Status '+res.getStatus()+' and Status Code '+res.getStatuscode()+' Message: '+e.getMessage();
                    }
                    System.debug(System.LoggingLevel.DEBUG, 'Exeception Executed'+errorMessage);
                    QuickbooksUtil.sendQuickBooksErrorEmail('Create Customer', errorMessage);
                } 
            }
            insert apiEvent;
        }catch(exception e){
            insert apiEvent;
        }
    }
}



/*
@RestResource(urlMapping='/QuickBooksToSalesforce/*')
global class QuickBooksToSalesforce {
@HttpPost
global static String doPost() {
RestRequest resRequest = RestContext.request;
System.debug('resRequest = ' + resRequest);
if(resRequest != null){
String request = resRequest.requestBody.toString();
System.debug('Request Body: ' + request);


Map<String, Object> parsedJson = (Map<String, Object>) JSON.deserializeUntyped(request);
System.debug('Parsed Jsonnnnnnn' +parsedJson);
List<Object> eventNotifications = (List<Object>) parsedJson.get('eventNotifications');
System.debug('EventNotificationssssss'+eventNotifications);
Map<String, Object> eventNotification = (Map<String, Object>) eventNotifications[0];
System.debug('EventNotificationnnnnn'+eventNotifications);
Map<String, Object> dataChangeEvent = (Map<String, Object>) eventNotification.get('dataChangeEvent');
System.debug('dataChangeEventtttttt'+dataChangeEvent);
List<Object> entities = (List<Object>) dataChangeEvent.get('entities');
System.debug('entitiesssssssssss'+entities);
Map<String, Object> entity = (Map<String, Object>) entities[0];
System.debug('entityyyyyyyyyyyyyyyyyy'+entity);
String entityId = (string) entity.get('id');
System.debug('entityIddddddddddddddddddddd'+entityId);
String operation = (string) entity.get('operation');
System.debug('operationnnnnnnnnnnnnnnnnnnn'+eventNotifications);

String accessToken = 'eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiZGlyIn0..RM6WTNLzyR8psrjBM400Xw.0UzBGFtKX8vER7RkwdcEapqBUwdEwIYq599FMxae6wFZpcvW8rwD3WTdtHyNwlC_ZQpTpln9hE8J6aMtxZMII2q3kd3dLQvVZ_aGqDkkUX_rVgUbfHTv0m-ExTjTVnyRP0OXuIHBnDAMDfVwhh3r0ev3jNTwylG8jXXEr6cRW6DkM7vKAw_-YkLs5hRV388uettWkMbi71rzIzzI10WSdLc_dCL88jeq7CbHkts5iKeaEQBp0OI7thG1mE_1LvHWpDCPc4p0Pq9m_CV6qeyRC6-6taem2owzRE0UlpLAlHOXPqwJ_9NDAIQB3yV-s7NrwEWSWoGvz88_x0Q--EP01p7IcNFk_2Ls7izTsuHOT1gZrJOg6nGE-9W_On0fSVR_56epBpaZwZJQqCRyG7HAAJUoupPzwzt2i9MByuyrS4HjZ3zS9zmAXZdkj9NAxPIWVfGQ6ocb8L1LeI72JhFNAWA_KrlF1jjIembe3RHza3q_LxbWQ8wM_St8uqic2SQOTv-uBUKWtnCqb8ZwCd-ykmzXgbbygJvXNxIt-IcFY7tHIrB-hs5n108rjVRPpXoVhPsr2DCCpqeH4yHM4lQlYiQQv53SBiDtwLjHPEAdbscaWti8VPsrdMWDLZ3gNmRrC7BSIpovKIxDYfWGSl4GEV3sWpTYe3E0XV9i3sksa3hWWSGjf6GAygza-v1tnfXVKQqh8NPN9ixRWDZrS6_bI2SkG2FS3a2t-gP0CJTRgP0a-VQfnyXgZSRYbs3EeeTk.f53pcj3q5tHhoAu2_ATIfg';
String realmId = '4620816365244111840';
string baseUrl = 'https://sandbox-quickbooks.api.intuit.com';
Integer minorVer = 69;


HttpRequest req = new HttpRequest();
req.setEndpoint(Test.isRunningTest() ? 'https://sandbox-quickbooks.api.intuit.com/v3/company/4620816365244111840/Customer/query?minorversion=65': baseUrl+'/v3/company/'+realmId+'/query?minorversion='+minorVer);
req.setMethod('POST');
req.setBody('select DisplayName,PrimaryEmailAddr,PrimaryPhone from Customer where id=\''+entityId+'\'');
req.setHeader('Authorization', 'Bearer '  + accessToken);
req.setheader('Accept', 'application/json');
req.setHeader('Content-Type', 'application/text');
Http http = new Http();
string errorMessage = '';
List<customer> customerList = new  List<customer>();
Account acc = new Account();

try{
acc = [Select id from Account where QB_Id__c = :entityId Limit 1];
}catch (Exception e) {
acc = null;
}
if(acc == null)
{


system.debug('req.body:1st: :'+req.getbody());
HttpResponse res2 = http.send(req);
if (res2.getStatusCode() == 200) {
system.debug('res2.getBody:: :'+res2.getBody());
Map<String, Object> deserializeJson2 = (Map<String, Object>) JSON.deserializeUntyped(res2.getBody());
System.debug('deserializeJson2' +deserializeJson2);
Map<String, Object> QueryResponseMap2 = (Map<String, Object>) deserializeJson2.get('QueryResponse');
System.debug('QueryResponseMap2' +QueryResponseMap2);
List<Object> customerMap = (List<Object>) QueryResponseMap2.get('Customer');    
System.debug('customerMap' +customerMap);
Map<String, Object> customerIndex = (Map<String, Object>) customerMap[0];
System.debug('customerIndex' +customerIndex);

String companyName = (customerIndex.containsKey('CompanyName')) ? (String)customerIndex.get('CompanyName') : null;
System.debug('companyName' +companyName);
String DisplayName = (customerIndex.containsKey('DisplayName')) ? (String)customerIndex.get('DisplayName') : null;
System.debug('companyName' +companyName);


Map<String, Object> primaryPhoneMap = (customerIndex.containsKey('PrimaryPhone')) ? (Map<String, Object>) customerIndex.get('PrimaryPhone') : null;
System.debug('primaryPhoneMap' +primaryPhoneMap);
String primaryPhone = (primaryPhoneMap != null) &&  customerIndex.get('FreeFormNumber') != null ? (String) customerIndex.get('FreeFormNumber') : null;
System.debug('primaryPhone' +primaryPhone);

Map<String, Object> primaryEmailMap = (customerIndex.containsKey('PrimaryEmailAddr')) ? (Map<String, Object>) customerIndex.get('PrimaryEmailAddr') : null;
System.debug('primaryEmailMap' +primaryEmailMap);
String primaryEmail = (primaryEmailMap != null) &&  primaryEmailMap.get('PrimaryEmailAddr') != null ? (String) primaryEmailMap.get('PrimaryEmailAddr') : null;
System.debug('primaryEmail' +primaryEmail);

Map<String,Object> mobileMap =(customerIndex.containsKey('Mobile')) ? (Map<String,Object>) customerIndex.get('Mobile') : null;
System.debug('mobileMap' +mobileMap);
String mobilePhone = (mobileMap != null && mobileMap.containsKey('FreeFormNumber')) ? (String) mobileMap.get('FreeFormNumber') : '';
System.debug('mobilePhone' +mobilePhone);
String givenName = (customerIndex.containsKey('GivenName') &&  customerIndex.get('GivenName') != null) ? (String) customerIndex.get('GivenName') : '';
System.debug('givenName' +givenName);
String familyName = (customerIndex.containsKey('FamilyName') && customerIndex.get('FamilyName') != null) ? (String) customerIndex.get('FamilyName') : '';
System.debug('familyName' +familyName);
String individualName = (givenName + ' ' + familyName).trim();
System.debug('individualName' +individualName);
Account acc2 ;

if(DisplayName != null && DisplayName != ''){
try{
acc2= [Select Id From Account Where name	=:DisplayName Limit 1];
System.debug('acc2' +acc2);
}catch(exception e){
acc2 = null;
}
}

if(companyName != null && acc2 == null){
try{
acc2= [Select Id From Account Where Name =:companyName Limit 1];
System.debug('acc2' +acc2);
}catch(exception e){
acc2 = null;
}
}else{
if(individualName != '' && acc2 == null){                                            
try{
acc2= [Select Id From Account Where Name =:individualName Limit 1];
System.debug('acc2' +acc2);
}catch(exception e){
acc2 = null; 
}
}
}                                    

//Final Execution
if(acc2 != null){
acc = acc2;
Account accUpdate = new Account();
accUpdate.id= acc.id;
accUpdate.QB_Id__c = entityId;
accUpdate.AccountSource = 'Automatic - Quickbooks Recurring Opportunity Updation';
update accUpdate;                                                                      
System.debug('accUpdate' +accUpdate);
} else {
Account acc3 = new Account();                            
if(companyName != null){
acc3.name = companyName;
// acc3.Type__c = 'Business';
System.debug('acc3' +acc3);
}else{
acc3.name = individualName;
// acc3.Type__c = 'Individual';
// acc3.First_Name__c = givenName ;
//acc3.Last_Name__c = familyName ;
}
acc3.name = DisplayName;
acc3.cc_email__c = primaryEmail;
acc3.Phone = primaryPhone;
acc3.AccountSource = 'Automatic - Quickbooks Recurring Opportunity Creation';
acc3.Created_From_QuickBooks__c = true;
acc3.QB_Id__c = entityId;
insert acc3;
System.debug('acc3' +acc3);
acc = acc3;
System.debug('acc' +acc);
}                                    
} 
}
}
return 'Hi';
}
}*/